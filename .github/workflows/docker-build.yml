---
name: Build, Test and Push Docker Image

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-24.04
            docker-platform: linux/amd64
            cache-scope: linux-amd64
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            docker-platform: linux/arm64
            cache-scope: linux-arm64
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for architecture-specific image
        id: meta-arch
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.cache-scope }}
            type=ref,event=pr,suffix=-${{ matrix.cache-scope }}
            type=semver,pattern={{version}},suffix=-${{ matrix.cache-scope }}
            type=semver,pattern={{major}}.{{minor}},suffix=-${{ matrix.cache-scope }}
            type=semver,pattern={{major}},suffix=-${{ matrix.cache-scope }}
            type=raw,value=latest-${{ matrix.cache-scope }},enable={{is_default_branch}}
          flavor: latest=false

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.docker-platform }}
          push: ${{ github.event_name != 'pull_request' }}
          load: ${{ github.event_name == 'pull_request' }}
          tags: ${{ steps.meta-arch.outputs.tags }}
          labels: ${{ steps.meta-arch.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.cache-scope }}
          cache-to: type=gha,mode=max,scope=${{ matrix.cache-scope }}

      - name: Test built image
        run: |
          IMAGE_TAG=$(echo "${{ steps.meta-arch.outputs.tags }}" | head -n 1)
          echo "Testing image: $IMAGE_TAG"
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            docker pull $IMAGE_TAG
          fi
          docker tag $IMAGE_TAG whisper-cli:test
          docker tag $IMAGE_TAG whisper-cli
          docker run --rm whisper-cli:test --help
          echo "Testing model loading..."
          echo "test" | docker run --rm -i whisper-cli:test --model tiny --no-stream || echo "Expected to fail without valid audio"
          echo "Testing wrapper script..."
          chmod +x transcribe
          ./transcribe || echo "Help displayed successfully"

  publish-manifest:
    if: github.event_name != 'pull_request'
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for manifest
        id: meta-manifest
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create and push multi-arch manifest
        run: |
          for tag in ${{ steps.meta-manifest.outputs.tags }}; do
            echo "Creating manifest for tag: $tag"
            docker buildx imagetools create -t $tag \
              "${tag}-linux-amd64" \
              "${tag}-linux-arm64"
          done

