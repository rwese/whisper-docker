---
name: Build and Push Docker Images

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-24.04
            docker-platform: linux/amd64
            cache-scope: linux-amd64
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            docker-platform: linux/arm64
            cache-scope: linux-arm64

    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx (Linux)
        if: startsWith(matrix.platform, 'linux')
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.cache-scope }}
            type=ref,event=pr,suffix=-${{ matrix.cache-scope }}
            type=semver,pattern={{version}},suffix=-${{ matrix.cache-scope }}
            type=semver,pattern={{major}}.{{minor}},suffix=-${{ matrix.cache-scope }}
            type=semver,pattern={{major}},suffix=-${{ matrix.cache-scope }}
            type=raw,value=latest-${{ matrix.cache-scope }},enable={{is_default_branch}}
          flavor: |
            latest=false

      - name: Build and push Docker image (Linux)
        if: startsWith(matrix.platform, 'linux')
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.docker-platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=${{ matrix.cache-scope }}
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-${{ matrix.cache-scope }}
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.cache-scope }}
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-${{ matrix.cache-scope }},mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          target: final

  test:
    needs: build
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-24.04
            docker-platform: linux/amd64
            cache-scope: linux-amd64
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            docker-platform: linux/arm64
            cache-scope: linux-arm64

    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Test Docker image
        run: |
          # Test help output
          docker run --rm whisper-cli:test --help

          # Test model loading (without actual audio)
          echo "Testing model loading..."
          echo "test" | docker run --rm -i whisper-cli:test --model tiny --no-stream || echo "Expected to fail without valid audio"

      - name: Test wrapper script
        run: |
          # Make script executable
          chmod +x transcribe

          # Test help
          ./transcribe || echo "Help displayed successfully"

  create-manifest:
    if: github.event_name != 'pull_request'
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-arch manifest
        run: |-
          # Extract base tag without platform suffix
          BASE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Create latest manifest
            docker buildx imagetools create -t ${BASE_TAG}:latest \
              ${BASE_TAG}:latest-linux-amd64 \
              ${BASE_TAG}:latest-linux-arm64
          fi

          # Create branch/tag specific manifests
          if [[ "${{ github.ref_type }}" == "branch" ]]; then
            BRANCH_NAME=$(echo ${{ github.ref_name }} | tr '/' '-')
            docker buildx imagetools create -t ${BASE_TAG}:${BRANCH_NAME} \
              ${BASE_TAG}:${BRANCH_NAME}-linux-amd64 \
              ${BASE_TAG}:${BRANCH_NAME}-linux-arm64
          fi

